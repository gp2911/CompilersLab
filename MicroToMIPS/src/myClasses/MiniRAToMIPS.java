//
// Generated by JTB 1.3.2
//

package myClasses;
import syntaxtree.*;
import java.util.*;
import visitor.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MiniRAToMIPS<R> implements GJNoArguVisitor<R> {
    CodeGenerator currCoder = new CodeGenerator();
    int spilledArgs = 0;
    Exp currExpr = null;
    String dest = null;
    boolean simplexReg = false;
    boolean argSpill = false;
    boolean isLabel = false;
    boolean inMove = false;
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if ( n.present() ){
            isLabel = true;
            return n.node.accept(this);
        }
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( Procedure() )*
     * f13 -> VariablePackingInfo()
     * f14 -> <EOF>
     */
    public R visit(Goal n) {
        R _ret=null;
        currCoder.indent = 9;
        currCoder.addCodeLine(".text");
        currCoder.addCodeLine(".globl           main");
        currCoder.indent = 0;
        currCoder.addCodeLine("main : ");
        currCoder.indent = 9;
        currCoder.addCodeLine("move $fp, $sp");
        int arg1 = Integer.parseInt(n.f2.f0.toString());
        int arg2 = Integer.parseInt(n.f5.f0.toString());
        int arg3 = Integer.parseInt(n.f8.f0.toString());
        int k = 0;
        if( arg3 > 4)
            k = 4*((arg3 - 4)+arg2+1);
        else
            k = 4*(arg2 + 1);
        currCoder.addCodeLine("subu $sp, $sp, "+Integer.toString(k));
        currCoder.addCodeLine("sw $ra, -4($fp)");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        currCoder.addCodeLine("lw $ra -4($fp)");
        currCoder.addCodeLine("addu $sp, $sp, "+Integer.toString(k));
        currCoder.addCodeLine("j $ra");
        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);
        currCoder.addCodeLine(".text");
        currCoder.addCodeLine(".globl           _halloc");
        currCoder.indent = 0;
        currCoder.addCodeLine("_halloc:");
        currCoder.indent = 9;
        currCoder.addCodeLine("li $v0, 9");
        currCoder.addCodeLine("syscall");
        currCoder.addCodeLine("jr $ra");
        currCoder.addCodeLine(".text");
        currCoder.addCodeLine(".globl           _print");
        currCoder.indent = 0;
        currCoder.addCodeLine("_print:");
        currCoder.indent = 9;
        currCoder.addCodeLine("li $v0, 1");
        currCoder.addCodeLine("syscall");
        currCoder.addCodeLine("la $a0, newl");
        currCoder.addCodeLine("li $v0, 4");
        currCoder.addCodeLine("syscall");
        currCoder.addCodeLine("jr $ra");
        currCoder.addCodeLine(".data");
        currCoder.addCodeLine(".align 0");
        currCoder.indent = 0;
        currCoder.addCodeLine("newl:   .asciiz \"\\n\"");
        currCoder.indent = 9;
        currCoder.addCodeLine(".data");
        currCoder.addCodeLine(".align 0");
        currCoder.indent = 0;
        currCoder.addCodeLine("str_er:   .asciiz \" ERROR: abnormal termination\\n\" ");

        System.out.println(currCoder.code);
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     */
    public R visit(Procedure n) {

        R _ret=null;
        String procName = n.f0.f0.toString();
        currCoder.addCodeLine(".text");
        currCoder.addCodeLine(".globl           "+procName);
        currCoder.indent = 0;
        currCoder.addCodeLine(procName+":");
        currCoder.indent = 9;
        currCoder.addCodeLine("sw $fp, -8($sp)");
        currCoder.addCodeLine("move $fp, $sp");
        int arg1 = Integer.parseInt(n.f2.f0.toString());
        int arg2 = Integer.parseInt(n.f5.f0.toString());
        int arg3 = Integer.parseInt(n.f8.f0.toString());
        if(arg1 > 4){
            argSpill = true;
            spilledArgs = arg1-4;
        }
        int l = 0;
        int k = 0;
        if( arg3 > 4)
            k = 4*((arg3 - 4)+arg2+2);
        else
            k = 4*(arg2 + 2);
        currCoder.addCodeLine("subu $sp, $sp, "+Integer.toString(k));
        currCoder.addCodeLine("sw $ra, -4($fp)");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        argSpill = false;
        spilledArgs = 0;
        currCoder.addCodeLine("lw $ra -4($fp)");
        if(arg3 <= 4)
            l = 4*(arg2+2) - 8;
        else
            l = 4*((arg3-4)+arg2+2)-8;
            currCoder.addCodeLine("lw $fp "+Integer.toString(l)+"($sp)");
        currCoder.addCodeLine("addu $sp, $sp, "+Integer.toString(k));
        currCoder.addCodeLine("j $ra");
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     *       | ALoadStmt()
     *       | AStoreStmt()
     *       | PassArgStmt()
     *       | CallStmt()
     */
    public R visit(Stmt n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        currCoder.addCodeLine("nop");
        return _ret;
    }
    //TODO
    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret=null;
        n.f0.accept(this);
        currCoder.addCodeLine("li $v0, 4");
        currCoder.addCodeLine("la $a0, str_er");
        currCoder.addCodeLine("syscall");
        currCoder.addCodeLine("li $v0, 10");
        currCoder.addCodeLine("syscall");
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        String reg = n.f1.f0.choice.toString();
        String label = n.f2.f0.toString();
        currCoder.addCodeLine("beqz $"+reg+" "+label);
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        String label = n.f1.f0.toString();
        currCoder.addCodeLine("b "+label);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    public R visit(HStoreStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        String x = n.f1.f0.choice.toString();
        String y = n.f2.f0.toString();
        String z = n.f3.f0.choice.toString();
        currCoder.addCodeLine("sw $"+z+", "+y+"($"+x+")");
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        String x = n.f1.f0.choice.toString();
        String y = n.f2.f0.choice.toString();
        String z = n.f3.f0.toString();
        currCoder.addCodeLine("lw $"+x+" "+z+"($"+y+")");
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret=null;
        String reg1 = n.f1.f0.choice.toString();
        n.f0.accept(this);
        n.f1.accept(this);
        dest = reg1;
        inMove = true;
        String expCode = (String) n.f2.accept(this);
        inMove = false;
        String hallocCode = n.f2.hallocCode;
        if(hallocCode != null)
            currCoder.addCodeLine(hallocCode);
//        if((n.f2.f0.which == 2) &&(isIntLit)){
//            currCoder.addCodeLine("li $"+reg1+" "+expCode);
//            isIntLit = false;
//        }
//        else if((n.f2.f0.which == 2) &&(isLabel)){
//            currCoder.addCodeLine("la $"+reg1+" "+expCode);
//            isLabel = false;
//        }
        if(n.f2.f0.which == 0)
            currCoder.addCodeLine("move $"+reg1+" "+expCode);
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public R visit(PrintStmt n) {
        R _ret=null;
        n.f0.accept(this);
        String simplexCode = (String) n.f1.accept(this);
        currCoder.addCodeLine("move $a0 "+simplexCode);
        currCoder.addCodeLine("jal _print");
        return _ret;
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    public R visit(ALoadStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        String reg = n.f1.toString();
        int k = Integer.parseInt(n.f2.f1.f0.toString());
        if(argSpill && k < spilledArgs)
            currCoder.addCodeLine("lw $"+reg+" "+Integer.toString(4*k)+"($fp)");
        else
            currCoder.addCodeLine("lw $"+reg+" "+Integer.toString(4*k)+"($sp)");
        return _ret;
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    public R visit(AStoreStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        String reg = n.f2.toString();
        int k = Integer.parseInt(n.f1.f1.f0.toString());
        currCoder.addCodeLine("sw $"+reg+", "+Integer.toString(4*k)+"($sp)");
        return _ret;
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */

    public R visit(PassArgStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        int k = Integer.parseInt(n.f1.f0.toString());
        String reg = n.f2.toString();
        currCoder.addCodeLine("sw $"+reg+", "+Integer.toString(4*(k-1))+"($sp)");
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    public R visit(CallStmt n) {
        R _ret=null;
        n.f0.accept(this);
        String simplexCode = (String) n.f1.accept(this);
        currCoder.addCodeLine("jalr "+simplexCode);
        return _ret;
    }

    /**
     * f0 -> HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public R visit(Exp n) {
        R _ret=null;
        if(n.f0.which != 2)
            inMove = false;
        Exp prevExpr = currExpr;
        currExpr = n;
        String expString  = (String) n.f0.accept(this);
        currExpr = prevExpr;
        return (R) expString;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public R visit(HAllocate n) {
        R _ret=null;
        n.f0.accept(this);
        String simplexString = (String) n.f1.accept(this);
        if(n.f1.f0.which == 0)
            currExpr.hallocCode = "move $a0 "+simplexString+"\n         jal _halloc";
        else if(n.f1.f0.which == 1)
            currExpr.hallocCode = "li $a0 "+simplexString+"\n         jal _halloc";
        else
            currExpr.hallocCode = "la $a0 "+simplexString+"\n         jal _halloc";

        return (R) "$v0";
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    public R visit(BinOp n) {
        R _ret=null;
        String opString = (String) n.f0.accept(this);
        String reg = n.f1.toString();
        boolean prevMove = inMove;
        inMove = false;
        if(n.f2.f0.which == 0)
            simplexReg = true;
        n.f1.accept(this);
        String simplexExp = (String) n.f2.accept(this);
        inMove = prevMove;
        currCoder.addCodeLine(opString+" $"+dest+", $"+reg+", "+simplexExp);
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     *       | "BITOR"
     *       | "BITAND"
     *       | "LSHIFT"
     *       | "RSHIFT"
     *       | "BITXOR"
     */
    public R visit(Operator n) {
        R _ret=null;
        n.f0.accept(this);
        String opString = null;
        switch(n.f0.which){
            case 0:
                opString = "slt";
                break;
            case 1:
                opString = "add";
                break;
            case 2:
                opString = "sub";
                break;
            case 3:
                opString = "mul";
                break;
            case 4:
                opString = "or";
                break;
            case 5:
                opString = "and";
                break;
            case 6:
                if(simplexReg)
                    opString = "sll";
                else
                    opString = "sllv";
                break;
            case 7:
                if(simplexReg)
                    opString = "srl";
                else
                    opString = "srlv";
                break;
            case 8:
                opString = "xor";

        }
        return (R) opString;
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    public R visit(SpilledArg n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Reg()
     *       | IntegerLiteral()
     *       | Label()
     */
    public R visit(SimpleExp n) {
        R _ret=null;
        String s = (String) n.f0.accept(this);
        return (R) s;
    }

    /**
     * f0 -> "a0"
     *       | "a1"
     *       | "a2"
     *       | "a3"
     *       | "t0"
     *       | "t1"
     *       | "t2"
     *       | "t3"
     *       | "t4"
     *       | "t5"
     *       | "t6"
     *       | "t7"
     *       | "s0"
     *       | "s1"
     *       | "s2"
     *       | "s3"
     *       | "s4"
     *       | "s5"
     *       | "s6"
     *       | "s7"
     *       | "t8"
     *       | "t9"
     *       | "v0"
     *       | "v1"
     */
    public R visit(Reg n) {
        R _ret=null;
        String s = "$";
        s = s + n.toString();
        if(inMove)
            currCoder.addCodeLine("move $"+dest+" "+s);
        n.f0.accept(this);
        return (R) s;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret=null;
        if(inMove)
            currCoder.addCodeLine("li $"+dest+" "+n.f0.toString());
        n.f0.accept(this);
        return (R) n.f0.toString();
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        R _ret=null;
        if(inMove)
            currCoder.addCodeLine("la $"+dest+" "+n.f0.toString());
        if(isLabel){
            currCoder.addLabel(n.f0.toString());
            isLabel = false;
        }

        n.f0.accept(this);

        return (R) n.f0.toString();
    }

    /**
     * f0 -> "// Number of  vars after packing ="
     * f1 -> IntegerLiteral()
     * f2 -> "; Number of Spilled vars ="
     * f3 -> IntegerLiteral()
     */
    public R visit(VariablePackingInfo n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

}
