package myClasses;

/**
 * Created with IntelliJ IDEA.
 * User: GP
 * Date: 22/10/13
 * Time: 11:17 AM
 * To change this template use File | Settings | File Templates.
 */

//
// Generated by JTB 1.3.2
//

import visitor.GJNoArguVisitor;

import java.util.Enumeration;
import visitor.*;
import syntaxtree.*;
import java.lang.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class StmtIndexer<R> implements GJNoArguVisitor<R> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    int index = 0;
    boolean labelled = false;
    public HashMap<String, Stmt> labelledStmts = new HashMap<String, Stmt>();
    public HashMap<String, ProcRegDetails> procRegs = new HashMap<String, ProcRegDetails>();
    public HashMap<Integer, Temp> tmps = new HashMap<Integer, Temp>();
    String currLabel = "";
    public ArrayList<Stmt> conditionalJmps = new ArrayList<Stmt>();
    Stmt currCJmp = null;
    ProcRegDetails currProc = null;
    Stmt currStmt = null;
    Exp currExpr = null;

    public R visit(NodeList n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if ( n.present() )
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public R visit(Goal n) {
        R _ret=null;
        ProcRegDetails prevProc = currProc;
        currProc = new ProcRegDetails();
        currProc.procName = "main";
        procRegs.put("main", currProc);
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        currProc = prevProc;
        n.f3.accept(this);
        n.f4.accept(this);
//        System.out.println("======================================================");
//        System.out.println(tmps.toString());
//        System.out.println();
//

        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public R visit(Procedure n) {
        R _ret=null;

        ProcRegDetails prevProc = currProc;
//        System.out.println("new currProc created...");
        currProc = new ProcRegDetails();
        currProc.procName = n.f0.f0.toString();
        currProc.argNum = Integer.parseInt(n.f2.f0.toString());
        currProc.maxArgs = 0;
        currProc.stackSpaceReq = 0;
        currProc.stackIndex = currProc.argNum - 1;

        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);

        procRegs.put(n.f0.f0.toString(), currProc);
        currProc = prevProc;
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()       0
     *       | ErrorStmt()    1
     *       | CJumpStmt()    2
     *       | JumpStmt()     3
     *       | HStoreStmt()   4
     *       | HLoadStmt()    5
     *       | MoveStmt()     6
     *       | PrintStmt()    7
     */
    public R visit(Stmt n) {

        R _ret=null;
        Stmt prevStmt = currStmt;
        currStmt = n;
        n.f0.accept(this);
        if(n.f0.which == 2){
            n.conditionalSuccessor = (Label) n.f0.accept(this);
        }
        n.stmtIndex = index;
        if(labelled)
            labelledStmts.put(currLabel, n);
        currLabel = "";
        labelled = false;
        currProc.stmtList.add(n);
        index++;
//        System.out.println("Used: ");
        Iterator<Temp> iterator = n.tempsUsed.iterator();
//        while(iterator.hasNext()){
//            Temp t=iterator.next();
//            if(t!=null)
//                System.out.println(t.toString());
//        }
//        System.out.println("Def: ");
//        iterator = n.tempsDef.iterator();
//        while(iterator.hasNext()){
//            Temp t=iterator.next();
//            System.out.println(t.toString());
//        }
//        System.out.println();
        currStmt = prevStmt;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
//        if(Integer.parseInt(n.f1.f1.f0.toString()) >= currProc.argNum)
        currStmt.isCJmp = true;
        currCJmp = currStmt;
            currStmt.tempsUsed.add(tmps.get(Integer.parseInt(n.f1.f1.f0.toString())));
        labelled = false;
        return (R) n.f2;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        currStmt.conditionalSuccessor = n.f1;
        currStmt.isJmp = true;
        labelled = false;
        if(currCJmp != null)
            conditionalJmps.add(currCJmp);
        currCJmp = null;
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public R visit(HStoreStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
//        if(Integer.parseInt(n.f1.f1.f0.toString()) >= currProc.argNum)
            currStmt.tempsUsed.add(tmps.get(Integer.parseInt(n.f1.f1.f0.toString())));
//        if(Integer.parseInt(n.f3.f1.f0.toString()) >= currProc.argNum)
            currStmt.tempsUsed.add(tmps.get(Integer.parseInt(n.f3.f1.f0.toString())));

        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
//        if(Integer.parseInt(n.f2.f1.f0.toString()) >= currProc.argNum)
            currStmt.tempsUsed.add(tmps.get(Integer.parseInt(n.f2.f1.f0.toString())));
//        if(Integer.parseInt(n.f1.f1.f0.toString()) >= currProc.argNum)
            currStmt.tempsDef.add(tmps.get(Integer.parseInt(n.f1.f1.f0.toString())));

        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
//        System.out.println(currStmt);
//        if(Integer.parseInt(n.f1.f1.f0.toString()) >= currProc.argNum)
            currStmt.tempsDef.add(tmps.get(Integer.parseInt(n.f1.f1.f0.toString())));
        currStmt.tempsUsed.addAll(n.f2.tempsUsed);

        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public R visit(PrintStmt n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);

        if(n.f1.f0.which == 0 && n.f1.info != null){
            currStmt.tempsUsed.add(n.f1.info);
        }

        return _ret;
    }

    /**
     * f0 -> Call()
     *       | HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public R visit(Exp n) {
        R _ret=null;
        Exp prevExpr = currExpr;
        currExpr = n;
        n.f0.accept(this);
        currExpr = prevExpr;
//        System.out.println("in Expr----");
//        System.out.println(n.f0.choice);
//        System.out.println(n.tempsUsed);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public R visit(StmtExp n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        Stmt ret = new Stmt();
        n.f3.accept(this);
        n.f4.accept(this);
        if(n.f3.f0.which == 0 && n.f3.info != null){
            ret.tempsUsed.add(n.f3.info);
        }
//        System.out.println("Return Stmt : "+ret);
        ret.stmtIndex = index;
        ret.successors.clear();
        currProc.stmtList.add(ret);
        index++;
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public R visit(Call n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
//        System.out.println("---------------------------"+currProc.maxArgs +" : "+ n.f3.size());
        if(currProc.maxArgs < n.f3.size())
            currProc.maxArgs = n.f3.size();
//        System.out.println(currProc.maxArgs);
        if(n.f1.f0.which==0 && n.f1.info != null)
            currExpr.tempsUsed.add(n.f1.info);
        if ( n.f3.present() ) {
            for ( Enumeration<Node> e = n.f3.elements(); e.hasMoreElements(); ) {
                Temp t = (Temp)(e.nextElement());
//                System.out.println("****"+Integer.parseInt(t.f1.f0.toString()));
//                if(Integer.parseInt(t.f1.f0.toString()) >= currProc.argNum)
                    currExpr.tempsUsed.add(tmps.get(Integer.parseInt(t.f1.f0.toString())));
                t.accept(this);
            }
        }


        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public R visit(HAllocate n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        if((n.f1.f0.which==0) /*&& (Integer.parseInt(n.f1.info.f1.f0.toString()) >= currProc.argNum)*/)
            currExpr.tempsUsed.add(n.f1.info);
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public R visit(BinOp n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
//        if(Integer.parseInt(n.f1.f1.f0.toString()) >= currProc.argNum)
            currExpr.tempsUsed.add(tmps.get(Integer.parseInt(n.f1.f1.f0.toString())));
        if((n.f2.f0.which==0) /*&& n.f2.info != null && (Integer.parseInt(n.f2.info.f1.f0.toString()) >= currProc.argNum)*/)
            currExpr.tempsUsed.add(tmps.get(Integer.parseInt(((Temp)(n.f2.f0.choice)).f1.f0.toString())));
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public R visit(Operator n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public R visit(SimpleExp n) {
        R _ret=null;
        n.f0.accept(this);
        if((n.f0.which == 0) /* && (Integer.parseInt(((Temp)(n.f0.choice)).f1.f0.toString()) >= currProc.argNum)*/)
            n.info = tmps.get(Integer.parseInt(((Temp)(n.f0.choice)).f1.f0.toString()));
        else
            n.info = null;
        if(currExpr != null && n.info != null)
            currExpr.tempsUsed.add(n.info);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public R visit(Temp n) {
        R _ret=null;
        n.f0.accept(this);
        n.f1.accept(this);
        int tmpnum = Integer.parseInt(n.f1.f0.toString());
        if(tmpnum < currProc.argNum){
            if(!currProc.localTemps.containsKey(tmpnum)){
                currProc.localTemps.put(tmpnum, n);
                currProc.tempSet.add(n);
            }
        }
        else if(!tmps.containsKey(tmpnum)){
            tmps.put(Integer.parseInt(n.f1.f0.toString()), n);
            currProc.tempSet.add(n);
        }
        return (R) n;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret=null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        R _ret=null;
        labelled = true;
        n.f0.accept(this);
        currLabel = n.f0.toString();
        return _ret;
    }

}

