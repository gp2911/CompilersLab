package myClasses;

/**
 * Created with IntelliJ IDEA.
 * User: GP
 * Date: 04/10/13
 * Time: 6:33 PM
 * To change this template use File | Settings | File Templates.
 */
//
// Generated by JTB 1.3.2
//

import syntaxtree.*;
import syntaxtree.Stmt;
import visitor.GJNoArguVisitor;

import java.util.Enumeration;


import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class CodeConverter<R> implements GJNoArguVisitor<R> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    String moveCode = "";
    int indent = 0;
    int tempIndex = 1001;
    ArrayList<Integer> tempList = null;

    boolean isParam = false;
    int argNo = 0;
    boolean inJmp = false;
    boolean inProc = false;
    CodeGenerator currCoder;

    ArrayList<MyStmt> currParamExpressions;
    ArrayList<String> funcs;



    public R visit(NodeList n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            tempList = new ArrayList<Integer>();
            if(isParam){
                String moveStr = "";
                for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                    Node x = e.nextElement();
                    moveStr += ((MyStmt)(x.accept(this))).moveCode;
                    tempList.add(((MyStmt)(x.accept(this))).retVal);
                    _count++;
                }
                return (R) moveStr;
            }
            else{
                for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                    e.nextElement().accept(this);
                    _count++;
                }
                return _ret;
            }
        }
        else
            return null;
    }

    public R visit(NodeOptional n) {
        if ( n.present() )
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public R visit(Goal n) {
        R _ret=null;
        MyStmt goal = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);
        currCoder = myCoder;
        indent++;
        n.f0.accept(this);
        CodeGenerator prevCoder = currCoder;
        currCoder = myCoder;
        MyStmt myStmtList = (MyStmt) n.f1.accept(this);
        currCoder = prevCoder;
        indent--;
        n.f2.accept(this);
        MyStmt myProcs = (MyStmt) n.f3.accept(this);
        n.f4.accept(this);

        myCoder.addCode("MAIN");
        myCoder.addCodeLine(myStmtList.code);
        myCoder.addCodeLine("END");
//        funcs = new ArrayList<String>();
//        System.out.println(myProcs);
        if(funcs != null){
        Iterator<String> funcIt = funcs.iterator();
        while (funcIt.hasNext()){
            String s = funcIt.next();
            myCoder.addCodeLine(s);
        }
        }

        goal.code = myCoder.code;

        System.out.println(goal.code);

        currCoder = null;

        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n) {
        R _ret=null;
        CodeGenerator prevCoder = currCoder;
        currCoder = new CodeGenerator(indent);
        MyStmt myStmtList = new MyStmt();
//        System.out.println(myStmtList);
        n.f0.accept(this);
//        System.out.println("ey");
//        System.out.println(currCoder);
//        System.out.println(currCoder.code);
//        try{
        myStmtList.code =currCoder.code;
//        }
//        catch (Exception e){}
        currCoder = prevCoder;
        return (R) myStmtList;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public R visit(Procedure n) {
//        System.out.println("in func...");
        R _ret=null;
        inProc = true;
        MyStmt myProc = new MyStmt();
        CodeGenerator prevCoder = currCoder;
        CodeGenerator myCoder = new CodeGenerator(indent);
        currCoder = myCoder;
        inJmp = true;
        MyStmt myLabel  = (MyStmt) n.f0.accept(this);
        inJmp = false;
        n.f1.accept(this);
        MyStmt myInt = (MyStmt) n.f2.accept(this);
        n.f3.accept(this);
        MyStmt myStmtExp = (MyStmt) n.f4.accept(this);

        myCoder.addCode(myLabel.info + " [" + myInt.code + "] ");
        myCoder.addCodeLine(myStmtExp.code);

        myProc.code = myCoder.code;
        myProc.info = myLabel.info;
//        System.out.println(myProc.code);
         if(funcs == null)
             funcs = new ArrayList<String>();
        funcs.add(myProc.code);
        currCoder = prevCoder;
        inProc = false;
        return (R) myProc;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    public R visit(Stmt n) {
        R _ret=null;
//        CodeGenerator prevCoder= currCoder;
        MyStmt myStmt = (MyStmt) n.f0.accept(this);
//        System.out.println(n.f0.which);
//        System.out.println(myStmt.code);
        if(currCoder!=null)
            currCoder.addCodeLine(myStmt.code);
        return (R) myStmt;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n) {
        R _ret=null;
        MyStmt myNoOp = new MyStmt();
        n.f0.accept(this);

        myNoOp.code = "NOOP";
        myNoOp.info = "noop";

        return (R) myNoOp;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n) {
        R _ret=null;
        MyStmt myErr = new MyStmt();
        n.f0.accept(this);

        myErr.code = "ERROR";
        myErr.info = "error";
        return (R) myErr;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Exp()
     * f2 -> Label()
     */
    public R visit(CJumpStmt n) {
        R _ret=null;
        MyStmt myCJump = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);

        n.f0.accept(this);
        inJmp = true;
        MyStmt expr = (MyStmt) n.f1.accept(this);
        MyStmt label = (MyStmt) n.f2.accept(this);
        inJmp = false;
        if(n.f1.f0.which < 4  )
            myCoder.addCodeLine(expr.code);
        myCoder.addCodeLine("CJUMP TEMP "+expr.retVal+ " "+ label.info);

        myCJump.code = myCoder.code;

        return (R) myCJump;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public R visit(JumpStmt n) {
        R _ret=null;
        MyStmt myJump = new MyStmt();
        inJmp = true;
        n.f0.accept(this);
        MyStmt label = (MyStmt) n.f1.accept(this);
        inJmp = false;
        myJump.code = "JUMP "+label.info ;

        return (R) myJump;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Exp()
     * f2 -> IntegerLiteral()
     * f3 -> Exp()
     */
    public R visit(HStoreStmt n) {
        R _ret=null;
        MyStmt myHStore = new MyStmt();
        CodeGenerator myCoder =new CodeGenerator(indent);

        n.f0.accept(this);
        inJmp = true;
        MyStmt expr1 = (MyStmt) n.f1.accept(this);
        MyStmt intLit = (MyStmt) n.f2.accept(this);
        MyStmt expr2 = (MyStmt) n.f3.accept(this);
        inJmp = false;

        if(n.f1.f0.which != 4 && expr1.info != "intLit")
            myCoder.addCode(expr1.code);
        if(n.f3.f0.which != 4 && expr2.info != "intLit" )
            myCoder.addCodeLine(expr2.code);
        if(expr1.info != "intLit" && expr2.info != "intLit")
            myCoder.addCodeLine("HSTORE TEMP "+expr1.retVal+" "+intLit.code+" TEMP "+ expr2.retVal);
//        if(expr1.info != "intLit" && n.f3.f0.which == 5)
//            myCoder.addCodeLine("HSTORE TEMP "+expr1.retVal+" "+intLit.code+" "+ expr2.code);
        if(expr2.info == "intLit"){
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" "+expr2.code);
            myCoder.addCodeLine("HSTORE TEMP "+expr1.retVal+" "+intLit.code+" TEMP "+ tempIndex);
            tempIndex++;
        }



        myHStore.code = myCoder.code;

        return (R) myHStore;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Exp()
     * f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n) {

        MyStmt myHLoad = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);

        R _ret=null;
        n.f0.accept(this);
        MyStmt tmp = (MyStmt) n.f1.accept(this);
        MyStmt expr = (MyStmt) n.f2.accept(this);
        MyStmt intLit = (MyStmt) n.f3.accept(this);
        if(n.f2.f0.which != 4 && expr.info != "intLit")
            myCoder.addCode(expr.code);
        myCoder.addCodeLine("HLOAD "+ tmp.code+" TEMP "+expr.retVal+" "+intLit.code);

        myHLoad.code = myCoder.code;


        return (R) myHLoad;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public R visit(MoveStmt n) {
        R _ret=null;
        MyStmt myMove = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);
        n.f0.accept(this);
        boolean prevJmpFlag = inJmp;
        inJmp = true;
        MyStmt tmp = (MyStmt) n.f1.accept(this);
        MyStmt exp = (MyStmt) n.f2.accept(this);
        inJmp = prevJmpFlag;
//        myCoder.addCodeLine("-----"+Integer.toString(n.f2.f0.which));
//        System.out.println("------"+n.f2.f0.which);
        if(n.f2.f0.which < 4)
            myCoder.addCodeLine(exp.code);
        if(exp.info != "intLit")
            myCoder.addCodeLine("MOVE "+tmp.code+" TEMP "+exp.retVal);
        else
            myCoder.addCodeLine("MOVE "+tmp.code+" "+exp.code);

        myMove.code = myCoder.code;

        return (R) myMove;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> Exp()
     */
    public R visit(PrintStmt n) {
        R _ret=null;
        MyStmt myPrint = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);
        n.f0.accept(this);

        MyStmt exp = (MyStmt) n.f1.accept(this);
        if(n.f1.f0.which != 4 && exp.info != "intLit")
            myCoder.addCodeLine(exp.code);
        if(exp.info != "intLit")
            myCoder.addCodeLine("PRINT TEMP "+exp.retVal);
        else
            myCoder.addCodeLine("PRINT "+exp.code);
        myPrint.code = myCoder.code;

        return (R) myPrint;
    }

    /**
     * f0 -> StmtExp()            0
     *       | Call()             1
     *       | HAllocate()        2
     *       | BinOp()            3
     *       | Temp()             4
     *       | IntegerLiteral()   5
     *       | Label()            6
     */
    public R visit(Exp n) {
        R _ret=null;
//        currCoder.addCodeLine("========" +Boolean.toString(inJmp)+"...."+Integer.toString(n.f0.which));
        boolean prevFlag = isParam;
        isParam = false;
        MyStmt myExpr = (MyStmt) n.f0.accept(this);
        isParam = prevFlag;
        if(isParam){
            currParamExpressions.add(myExpr);
            argNo++;
//            myExpr.moveCode = ((MyStmt) n.f0.accept(this)).moveCode;
            return (R) myExpr;
        }
//        currCoder.addCodeLine(myExpr.code+Boolean.toString(inJmp)+"||||||||||");



        return (R) myExpr;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> Exp()
     * f4 -> "END"
     */
    public R visit(StmtExp n) {
        R _ret=null;
        boolean prevflag = inProc;
        MyStmt myStmtExp = new MyStmt();
//        CodeGenerator prevCoder= currCoder;
        CodeGenerator myCoder = new CodeGenerator(indent);
//        currCoder = myCoder;
        n.f0.accept(this);
        indent++;
//        myCoder.addCodeLine("--------------In stmt exp..."+Boolean.toString(inJmp));
        inProc = false;
        MyStmt stmtList = (MyStmt) n.f1.accept(this);

        n.f2.accept(this);
//        myCoder.addCodeLine("nvkdsvk");
        MyStmt expr = (MyStmt) n.f3.accept(this);
        inProc = prevflag;
        indent--;
        n.f4.accept(this);
        myCoder.addCodeLine("\n");
        if(inProc){
            myCoder.addCodeLine("BEGIN");

        }
        inProc = false;
        myCoder.addCodeLine(stmtList.code);

        if(n.f3.f0.which != 4 && expr.info != "intLit")
            myCoder.addCodeLine(expr.code);
        inProc = prevflag;

        if(inProc){
            if(expr.info != "intLit")
           myCoder.addCodeLine(" RETURN TEMP "+ expr.retVal);
            else
            myCoder.addCodeLine(" RETURN "+expr.code);
           myCoder.addCodeLine("END");
        }
//        myCoder.addCodeLine("------------Leaving..."+Boolean.toString(inJmp));
        myStmtExp.code = myCoder.code;
        myStmtExp.retVal = expr.retVal;
//        currCoder = prevCoder;
        return (R) myStmtExp;
    }

    /**
     * f0 -> "CALL"
     * f1 -> Exp()
     * f2 -> "("
     * f3 -> ( Exp() )*
     * f4 -> ")"
     */
    public R visit(Call n) {
        R _ret=null;

        MyStmt myCall = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);

        n.f0.accept(this);
        MyStmt exp = (MyStmt) n.f1.accept(this);
        n.f2.accept(this);
        isParam = true;
        currParamExpressions = new ArrayList<MyStmt>();
        argNo = 0;
        n.f3.accept(this);
        isParam = false;
        n.f4.accept(this);
        Iterator<MyStmt> iterator = currParamExpressions.iterator();
        while (iterator.hasNext()){
            MyStmt exp1 = iterator.next();
            if(exp1.info != "temp" && exp1.info != "intLit")
                myCoder.addCodeLine(exp1.code);
            if(exp1.info == "intLit"){
                myCoder.addCodeLine(exp1.moveCode);
            }
        }
        if(n.f1.f0.which!=4)
            myCoder.addCodeLine(exp.code);
        myCoder.addCodeLine1("MOVE TEMP " + tempIndex + " CALL TEMP " + exp.retVal + "( ");
        iterator = currParamExpressions.iterator();
//        myCoder.addCodeLine(currParamExpressions.toString());
        boolean x = true;
        while (iterator.hasNext()){

            MyStmt exp1 = iterator.next();
            if(x){
                x=false;
                continue;
            }
//            if(exp1.info != "intLit")
                myCoder.addCode("TEMP " + exp1.retVal + " ");
//            else
//                myCoder.addCode(exp1.code+" ");
        }
        myCoder.addCode(")");

        myCall.code = myCoder.code;
        myCall.retVal = tempIndex;
        tempIndex++;

        return (R) myCall;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> Exp()
     */
    public R visit(HAllocate n) {
        R _ret=null;
        MyStmt myHAlloc = new MyStmt();
        CodeGenerator myCoder = new CodeGenerator(indent);

        n.f0.accept(this);
        MyStmt exp = (MyStmt) n.f1.accept(this);
        if(n.f1.f0.which != 4 && exp.info != "intLit")
            myCoder.addCodeLine(exp.code);
        if(exp.info != "intLit")
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" HALLOCATE TEMP "+ exp.retVal);
        else{
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" HALLOCATE "+exp.code);
        }
        myHAlloc.code = myCoder.code;
        myHAlloc.retVal = tempIndex;

        tempIndex++;

        return (R) myHAlloc;
    }

    /**
     * f0 -> Operator()
     * f1 -> Exp()
     * f2 -> Exp()
     */
    public R visit(BinOp n) {
        R _ret=null;

        MyStmt myBinOp = new MyStmt();

        String op = (String) n.f0.accept(this);
        MyStmt exp1 = (MyStmt) n.f1.accept(this);
        MyStmt exp2 = (MyStmt) n.f2.accept(this);

        CodeGenerator myCoder = new CodeGenerator(indent);

        if(n.f1.f0.which != 4 && exp1.info != "intLit")
            myCoder.addCodeLine(exp1.code);
        if(n.f2.f0.which != 4 && exp2.info != "intLit")
            myCoder.addCodeLine(exp2.code);
        if(exp2.info != "intLit" && exp1.info != "intLit")
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+ " "+op+" TEMP "+exp1.retVal+" TEMP "+exp2.retVal);
        if(exp2.info == "intLit" && exp1.info != "intLit"){
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" "+exp2.code);
            int intTmp = tempIndex;
            tempIndex++;
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+ " "+op+" TEMP "+exp1.retVal+" TEMP "+Integer.toString(intTmp));
        }


        if(exp2.info != "intLit" && exp1.info == "intLit"){
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" "+exp1.code);
            int intTmp = tempIndex;
            tempIndex++;
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+ " "+op+" TEMP "+intTmp+" TEMP "+exp2.retVal);
        }

        if(exp2.info == "intLit" && exp1.info == "intLit"){
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" "+exp1.code);
            int intTmp1 = tempIndex;
            tempIndex++;
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+" "+exp2.code);
            int intTmp2 = tempIndex;
            tempIndex++;
            myCoder.addCodeLine("MOVE TEMP "+tempIndex+ " "+op+" TEMP "+intTmp1+" TEMP "+intTmp2);
        }


        myBinOp.code = myCoder.code;
        myBinOp.retVal = tempIndex;

        tempIndex++;

        return (R) myBinOp;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public R visit(Operator n) {
        R _ret=null;
        String s = n.f0.choice.toString();
        n.f0.accept(this);
        return (R) s;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public R visit(Temp n) {
        R _ret=null;
        n.f0.accept(this);
//        currCoder.addCodeLine("!!!!!!"+Boolean.toString(inJmp));
        MyStmt myTemp = new MyStmt();
        MyStmt intLit = (MyStmt) n.f1.accept(this);
        myTemp.code = "TEMP "+intLit.code;
        myTemp.retVal = Integer.parseInt(intLit.code);
        myTemp.info = "temp";
//        currCoder.addCodeLine("::::::"+Boolean.toString(inJmp));
        return (R) myTemp;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret=null;
        n.f0.accept(this);
        MyStmt myIntLit = new MyStmt();
        myIntLit.moveCode = "MOVE TEMP "+tempIndex+" "+n.f0.toString()+"\n";
        myIntLit.code = n.f0.toString();
        myIntLit.info = "intLit";
        myIntLit.retVal = tempIndex;

        tempIndex++;

        return (R) myIntLit;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n) {
        R _ret=null;

        n.f0.accept(this);

        MyStmt myLabel = new MyStmt();
        myLabel.code = "MOVE TEMP "+tempIndex+" "+n.f0.toString();
        myLabel.retVal = tempIndex;
        myLabel.info = n.f0.toString();
//        currCoder.addCodeLine(Boolean.toString(inJmp)+"NNNNNNNNN");
        if(!inJmp)  {
            currCoder.addCodeLine(n.f0.toString()+" NOOP ");
        }

        tempIndex++;
        return (R) myLabel;
    }

}

